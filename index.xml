<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kushaal Vaidya</title>
    <link>/</link>
    <description>Recent content on Kushaal Vaidya</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Sun, 09 May 2021 00:00:00 +0000</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>First Post!</title>
      <link>/post/2021/05/09/first-post/</link>
      <pubDate>Sun, 09 May 2021 00:00:00 +0000</pubDate>
      
      <guid>/post/2021/05/09/first-post/</guid>
      <description>Overview This post is written to show how, through reticulate, Python and R can communicate with each other!
 Purpose Using Python and R together can be extremely useful in many situations. Combining the statistical tools and packages in R with the large variety of code structures in Python creates an immensely versatile tool which can be used to successfully analyze all types of data.
 Code As a simple example, let’s create a single sentence using both Python and R language.</description>
    </item>
    
    <item>
      <title>Project 1: Exploratory Data Analysis</title>
      <link>/project/project1/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/project/project1/</guid>
      <description>INTRODUCTION: Basketball Stats and Analytics There were two data sets used for this analysis: “Raptor WAR” and “Box” data sets, both of which list various statistics for NBA players. Sports analytics are one of my hobbies, so the prospect of being able to analyze this type of data was very interesting to me. The bulk of this data comes from the “Box” data set, which was scraped from the basketball data website “Basketball Reference”.</description>
    </item>
    
    <item>
      <title>Project 2: Modeling</title>
      <link>/project/project2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/project/project2/</guid>
      <description>Introduction RaptorWAR2 &amp;lt;- read_csv(&amp;quot;RaptorWAR2.csv&amp;quot;) PlayerBoxData &amp;lt;- read_csv(&amp;quot;PlayerBoxData.csv&amp;quot;) BoxData2 &amp;lt;- PlayerBoxData BoxData2 &amp;lt;- select(BoxData2, -c(14:23)) playerdata &amp;lt;- inner_join(RaptorWAR2, BoxData2, by=&amp;quot;Player&amp;quot;) playerdata &amp;lt;- playerdata %&amp;gt;% mutate_all(~gsub(&amp;quot;PG-SG&amp;quot;, &amp;quot;SG&amp;quot;, .)) playerdata$RWAR &amp;lt;- as.numeric(as.character(playerdata$RWAR)) playerdata$Age &amp;lt;- as.numeric(as.character(playerdata$Age)) playerdata$Minutes &amp;lt;- as.numeric(as.character(playerdata$Minutes)) playerdata$`TS%` &amp;lt;- as.numeric(as.character(playerdata$`TS%`)) playerdata$`3PAr` &amp;lt;- as.numeric(as.character(playerdata$`3PAr`)) playerdata$FTr &amp;lt;- as.numeric(as.character(playerdata$FTr)) playerdata$`TRB%` &amp;lt;- as.numeric(as.character(playerdata$`TRB%`)) playerdata$`AST%` &amp;lt;- as.numeric(as.character(playerdata$`AST%`)) playerdata$`STL%` &amp;lt;- as.numeric(as.character(playerdata$`STL%`)) playerdata$`BLK%` &amp;lt;- as.numeric(as.character(playerdata$`BLK%`)) playerdata$`TOV%` &amp;lt;- as.numeric(as.character(playerdata$`TOV%`)) PlayerData2 &amp;lt;- select(playerdata, -c(12:13)) PlayerDataFinal &amp;lt;- PlayerData2 %&amp;gt;% mutate(EfficientScorer=ifelse(`TS%` &amp;gt; mean(`TS%`), 1, 0)) For this analysis, I used the same data set that I used in Project 1, individual statistics for 175 basketball players as well as their overall summary statistic, RAPTOR WAR.</description>
    </item>
    
    <item>
      <title>Projects</title>
      <link>/projects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/projects/</guid>
      <description> Check out some of my coding projects below:
 Wrangling &amp;amp; Exploratory Data Analysis
 Modeling, Inference, Prediction
  -- </description>
    </item>
    
    
  </channel>
</rss>
